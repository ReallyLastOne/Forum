package com.forum.model;

import lombok.*;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.time.LocalDateTime;
import java.util.*;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@RequiredArgsConstructor
public class Thread {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NonNull
    private String name;

    @OneToMany(orphanRemoval = true, mappedBy = "thread", cascade = CascadeType.ALL)
    private List<Post> posts = new ArrayList<>();

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "section_id") // not necessary, automatically generated by mappedBy in referencing site
    private Section section;

    public void addPost(Post post) {
        posts.add(post);
        post.setThread(this);
    }

    public void removePost(Post post) {
        posts.remove(post);
        post.setThread(null);
    }

    public Optional<Post> findMostRecentPost() {
        return posts.stream().max(Comparator.comparing(Post::getCreationDate));
    }

    public Optional<Post> findFirstPost() {
        return posts.stream().min(Comparator.comparing(Post::getCreationDate));
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Thread thread = (Thread) o;
        return Objects.equals(id, thread.id) && Objects.equals(name, thread.name) && Objects.equals(posts, thread.posts) && Objects.equals(section, thread.section);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, posts, section);
    }
}
